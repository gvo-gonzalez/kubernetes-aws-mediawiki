Nota, 
    El stack levanta un cluster de kubernetes corriendo mediawiki versionada por bitnami
    Requiere dominio en AWS
    Requiere certificado emitido por AWS

Proceso: 

1. Instalar VirtualBox

2. Instalar Ansible

3. Descomprimir el archivo kops-lab.tar.gz

4. cd kops-lab 

5. Configurar dominio y region en terraform
    5.1 Editar el archivo: provision/terraform/terraform.tfvars y cambiar credenciales y dominio
        aws_access_key = "your_access_key_id"
        aws_secret_key = "your_secret_key"
        aws_region = "your-region"
        kubernetes_states_bucket = "kubecluster-state-store.domain.com" # cambiar 'domain' por el dominio 
        domain_name = "domain.com o *.domain.com" # Tal como figura en el dashboard de Amazon Certificate Manager

6. Configurar Ansible vars.
    6.1 Editar el archivo: provision/ansible/vars.yml
        # Declarar el bucket creado por terraform con el mismo nombre de la variable declarada en terraform.tfvars
        kops_create_cluster_state: "s3://kubecluster-state-store.domain.com"
        # Declarar la region donde se levanta el cluster, tiene que coincidir con la region declarada en terraform.tfvars 
        aws_region: "your_region"
        # Declarar el bucket creado por terraform sin el prefijo s3://
        kubernetes_states_bucket: "kubecluster-state-store.domain.com"
        # Declarar la zona DNS como aparece en Route53
        dns_base: "domain.com"
        # Declarar un dominio para el servicio k8s que se va a implementar declarado en provision/ansible/templates
        service_domain: "mediawiki.domain.com"
        # Declarar nuevamente la region donde se implementa el cluster
        main_region: "your_region"

7. Levantar el entorno VM desde el directorio root del proyecto y crear el stack de kubernetes
    7.1 Levantar la maquina virtual
        vagrant up
    
    7.2 Cambiar permisos de la key que usa ansible para conectarse a la maquina virtual
        chmod 0400 ssh-cfg/insecure_private_key
    
    7.3 Verificar la conectividad de ansible con la vm creada
        ansible all -m ping
    
    7.4 Si no hay errores al ejecutar ping a la vm, podemos  levanta el cluster ejecutando:
        ansible-playbook    provision/ansible/main_playbook.yml

    7.5 Completado el proceso y si no hubo errores, se puede verificar la instalacion accediendo a la url:
        service_domain: "mediawiki.domain.com"
        login: 
                wikilogin: "wiki_user" # variable declarada en vars.yml
                wikiloginpass: "wiki_user2020" # variable declarada en vars.yml

8. Acceso al cluster por consola. Todas las herramientas estan instaladas en la VM. 
    8.1 vagrant ssh
    
    8.2 Configurar entorno para conectarse a AWS 
        export AWS_ACCESS_KEY_ID=SARASASARASA123
        export AWS_SECRET_ACCESS_KEY=s1A2R3a4S5a/ToDOz1A2R3a4Z5a0tr9
        export AWS_REGION=xx-sarasa-1
    
    8.3 Operar el cluster
        kubectl get pods -o wide (por ej.)

9. Acceso al cluster por dashboard. (mediante proxy local)
    9.1 URL
    http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/#/login
    
    9.2 Obtener el TOKEN
        vagrant ssh
        cat /hostSharedData/kops-files/dashboard-admin-token-log

10. Clean up kubernetes stack
    10.1 Configurar entorno para conectarse a AWS 
        export AWS_ACCESS_KEY_ID=SARASASARASA123
        export AWS_SECRET_ACCESS_KEY=s1A2R3a4S5a/ToDOz1A2R3a4Z5a0tr9
        export AWS_REGION=xx-sarasa-1
    
    10.2 Eliminar el cluster
        kops delete cluster --name {{ cluster_name }} --state "{{ cluster_bucket  }}" --yes

            cluster_name: valor de la variable 'kops_create_cluster_name' en vars.yml
            cluster_bucket: valor de la variable 'kops_create_cluster_state'  en vars.yml

    10.3 Eliminar recursos creados por terraform
        cd /hostSharedData/terraform
        terraform destroy

    10.4 Eliminar keys y datos generados:
        rm -fr /hostSharedData/kops-files
        rm -fr /hostSharedData/terraform/ssh-keys
        rm -fr /hostSharedData/terraform/.terraform
        rm -fr /hostSharedData/terraform/terraform.tfstate
        rm -fr /hostSharedData/terraform/terraform.tfstate.backup

    10.5 Ingresar a route53 y eliminar el dominio generado automaticamente y declarado en la variable 'service_domain'
        del archivo de configuracion vars.yml

